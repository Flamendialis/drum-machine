{"version":3,"sources":["components/DrumMachine/DrumMachine.js","serviceWorker.js","index.js"],"names":["Pad","props","playSound","bind","keyPress","document","addEventListener","this","clip","getElementById","keyName","volume","currentTime","play","display","description","event","key","toUpperCase","className","onClick","id","src","url","React","Component","DrumMachine","state","volumeChange","setState","target","value","str","innerHTML","bank","map","pad","onChange","type","min","max","step","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mPAKMA,G,wDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAJD,E,gEAOfE,SAASC,iBAAiB,UAAWC,KAAKH,Y,kCAG1C,IAAMI,EAAOH,SAASI,eAAeF,KAAKN,MAAMS,SAChDF,EAAKG,OAASJ,KAAKN,MAAMU,OACzBH,EAAKI,YAAc,EACnBJ,EAAKK,OACLN,KAAKN,MAAMa,QAAQP,KAAKN,MAAMc,e,+BAEzBC,GACFA,EAAMC,IAAIC,gBAAkBX,KAAKN,MAAMS,SACtCH,KAAKL,c,+BAKT,OACI,yBAAKiB,UAAU,WAAWC,QAASb,KAAKL,WAAYK,KAAKN,MAAMS,QAC3D,2BAAOS,UAAU,OAAOE,GAAId,KAAKN,MAAMS,QAASY,IAAKf,KAAKN,MAAMsB,W,GA1B9DC,IAAMC,YA+ETC,E,kDAzCX,WAAYzB,GAAQ,IAAD,8BACf,cAAMA,IACD0B,MAAQ,CACThB,OAAQ,GAEZ,EAAKG,QAAU,EAAKA,QAAQX,KAAb,gBACf,EAAKyB,aAAe,EAAKA,aAAazB,KAAlB,gBANL,E,yDAQNa,GACTT,KAAKsB,SAAS,CAAClB,OAAQK,EAAMc,OAAOC,U,8BAEhCC,GACJ3B,SAASI,eAAe,WAAWwB,UAAY,GAC/C5B,SAASI,eAAe,WAAWwB,UAAYD,I,+BAEzC,IAAD,OACL,OACI,yBAAKX,GAAG,eAAeF,UAAU,gBAC7B,yBAAKA,UAAU,iBACX,yBAAKE,GAAG,UAAUF,UAAU,WAA5B,iBAEJ,yBAAMA,UAAU,kBAERZ,KAAKN,MAAMiC,KAAKC,KAAK,SAAAC,GAAG,OAAI,kBAAC,EAAD,CACxB1B,QAAS0B,EAAInB,IACbM,IAAKa,EAAIb,IACTR,YAAeqB,EAAIrB,YACnBD,QAAW,EAAKA,QAChBH,OAAU,EAAKgB,MAAMhB,aAIjC,yBAAKQ,UAAU,UACX,2BAAOY,MAAOxB,KAAKoB,MAAMhB,OAAQ0B,SAAU9B,KAAKqB,aAAeU,KAAK,QAAQC,IAAI,IAAIC,IAAI,MAAMC,KAAK,SACnG,2C,GAnCMjB,IAAMC,WC9BZiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DC+CNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,yBAAK9B,UAAU,kBACb,yBAAKA,UAAU,kBACb,kBAAC,EAAD,CAAae,KA9DR,CACX,CACIE,IAAK,EACLnB,IAAK,IACLF,YAAa,UACbQ,IAAI,2DAER,CACIa,IAAK,EACLnB,IAAK,IACLF,YAAa,UACbQ,IAAI,2DAER,CACIa,IAAK,EACLnB,IAAK,IACLF,YAAa,UACbQ,IAAI,2DAER,CACIa,IAAK,EACLnB,IAAK,IACLF,YAAa,SACbQ,IAAI,mEAER,CACIa,IAAK,EACLnB,IAAK,IACLF,YAAa,UACbQ,IAAI,2DAER,CACIa,IAAK,EACLnB,IAAK,IACLF,YAAa,YACbQ,IAAI,0DAER,CACIa,IAAK,EACLnB,IAAK,IACLF,YAAa,cACbQ,IAAI,iEAER,CACIa,IAAK,EACLnB,IAAK,IACLF,YAAa,aACbQ,IAAI,gEAER,CACIa,IAAK,EACLnB,IAAK,IACLF,YAAa,QACbQ,IAAI,+DAWJ,yBAAKJ,UAAU,UACb,0EACA,4FAKNd,SAASI,eAAe,SDqDpB,kBAAmByC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c9c7981d.chunk.js","sourcesContent":["import React from 'react';\r\nimport  './DrumMachine.scss';\r\n\r\n\r\n\r\nclass Pad extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.playSound = this.playSound.bind(this);\r\n        this.keyPress = this.keyPress.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        document.addEventListener('keydown', this.keyPress);\r\n    }\r\n    playSound() {\r\n        const clip = document.getElementById(this.props.keyName);\r\n        clip.volume = this.props.volume;\r\n        clip.currentTime = 0;\r\n        clip.play();\r\n        this.props.display(this.props.description);\r\n    }\r\n    keyPress(event){\r\n        if(event.key.toUpperCase() === this.props.keyName){\r\n            this.playSound();\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className='drum-pad' onClick={this.playSound}>{this.props.keyName}\r\n                <audio className=\"clip\" id={this.props.keyName} src={this.props.url}>\r\n                </audio>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nclass DrumMachine extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            volume: 1\r\n        }\r\n        this.display = this.display.bind(this);\r\n        this.volumeChange = this.volumeChange.bind(this);\r\n    }\r\n    volumeChange(event) {\r\n        this.setState({volume: event.target.value})\r\n    }\r\n    display(str){\r\n        document.getElementById('display').innerHTML = '';\r\n        document.getElementById('display').innerHTML = str;\r\n    }\r\n    render() {\r\n        return(\r\n            <div id='drum-machine' className='drum-machine'>\r\n                <div className=\"display-frame\">\r\n                    <div id='display' className='display'>DRUM MACHINE</div>\r\n                </div>\r\n                <div  className='pads-container'>\r\n                    {\r\n                        this.props.bank.map( pad => <Pad \r\n                            keyName={pad.key} \r\n                            url={pad.url} \r\n                            description = {pad.description}\r\n                            display = {this.display}\r\n                            volume = {this.state.volume}\r\n                        />)     \r\n                    }\r\n                </div>\r\n                <div className='volume'>\r\n                    <input value={this.state.volume} onChange={this.volumeChange}  type='range' min='0' max='1.0' step='0.01'></input>\r\n                    <p>VOLUME</p>\r\n                </div>\r\n            </div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default DrumMachine;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport DrumMachine from './components/DrumMachine';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst PADS = [\n  {\n      pad: 0, \n      key: 'Q',\n      description: 'Chord-A',\n      url:'https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3'\n  },\n  {\n      pad: 1,\n      key: 'W',\n      description: 'Chord-B',\n      url:'https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3'\n  },\n  {\n      pad: 2,\n      key: 'E',\n      description: 'Chord-C',\n      url:'https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3'\n  },\n  {\n      pad: 3,\n      key: 'A',\n      description: 'Shaker',\n      url:'https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3'\n  },\n  {\n      pad: 4,\n      key: 'S',\n      description: 'Open-HH',\n      url:'https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3'\n  },\n  {\n      pad: 5,\n      key: 'D',\n      description: 'Closed-HH',\n      url:'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\n  },\n  {\n      pad: 6,\n      key: 'Z',\n      description: 'Punchy-Kick',\n      url:'https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3'\n  },\n  {\n      pad: 7,\n      key: 'X',\n      description: 'Side-Stick',\n      url:'https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3'\n  },\n  {\n      pad: 8,\n      key: 'C',\n      description: 'Snare',\n      url:'https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3'\n  }\n  \n  ];\n\nReactDOM.render(\n  <React.StrictMode>\n    <div className='main-container'>\n      <div className='drum-container'>\n        <DrumMachine bank={PADS} />\n      </div>\n      <div className='footer'>\n        <p>Created by Félix Menéndez using React</p>\n        <p>Click on the pads or use your keyboard to play the samples</p>\n      </div>\n\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}